# src/model/inference.py
import torch
import numpy as np
from .autoencoder_2d import UNet2D
import gc
import logging

logger = logging.getLogger(__name__)


class PathologyDetector:
    def __init__(self, model_path: str, device='cuda' if torch.cuda.is_available() else 'cpu'):
        self.device = device
        self.model = UNet2D(in_channels=1, out_channels=1, base_features=32).to(device)
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device} –∏–∑ {model_path}")
        try:
            state_dict = torch.load(model_path, map_location=device)
            self.model.load_state_dict(state_dict)
            logger.info("‚úÖ –°–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            raise
        self.model.eval()
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏ (eval).")

    def predict(self, volume: np.ndarray) -> float:
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞—Ç–æ–ª–æ–≥–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ 2D —Å—Ä–µ–∑–∞.
        Args:
            volume: np.ndarray —Å —Ñ–æ—Ä–º–æ–π (1, 1, 128, 128) - –±–∞—Ç—á –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
        Returns:
            float: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞—Ç–æ–ª–æ–≥–∏–∏ (0.0 - 1.0).
        """
        logger.debug(f"üîç –ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –§–æ—Ä–º–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞: {volume.shape}")
        torch.cuda.empty_cache()
        gc.collect()

        if volume.shape != (1, 1, 128, 128):
            logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞: {volume.shape}. –û–∂–∏–¥–∞–µ—Ç—Å—è (1, 1, 128, 128)")

        mse = 1.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            with torch.no_grad():
                tensor = torch.from_numpy(volume).float().to(self.device)
                logger.debug(f"üîç Stats –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–Ω–∑–æ—Ä–∞: min={tensor.min().item():.4f}, max={tensor.max().item():.4f}, mean={tensor.mean().item():.4f}")

                recon = self.model(tensor)
                logger.debug(f"üîç –§–æ—Ä–º–∞ —Ç–µ–Ω–∑–æ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {recon.shape}")
                logger.debug(f"üîç Stats –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–Ω–∑–æ—Ä–∞: min={recon.min().item():.4f}, max={recon.max().item():.4f}, mean={recon.mean().item():.4f}")

                mse = torch.mean((tensor - recon) ** 2).item()
                logger.debug(f"üîç –í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è MSE: {mse:.6f}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}", exc_info=True)
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –º–æ–¥–µ–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã—Å–æ–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞—Ç–æ–ª–æ–≥–∏–∏
            mse = 1.0

        finally:
            if 'tensor' in locals():
                del tensor
            if 'recon' in locals():
                del recon
            torch.cuda.empty_cache()
            gc.collect()

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º MSE –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        # –ü–æ—Ä–æ–≥ 0.008 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–æ–±—Ä–∞–Ω –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ.
        # –ï—Å–ª–∏ MSE –≤—Å–µ–≥–¥–∞ –±–æ–ª—å—à–∞—è, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞ 1.0
        # –ï—Å–ª–∏ MSE –±–ª–∏–∑–∫–∞ –∫ 0, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –±–ª–∏–∑–∫–∞ –∫ 0.
        # –î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ "–∂–µ—Å—Ç–∫–∏–π" –ø–æ—Ä–æ–≥, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Ä–∞–∑–ª–∏—á–∏—è
        # probability = min(mse / 0.008, 1.0)
        # –ò–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–≥–º–æ–∏–¥—É –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        # probability = 1.0 / (1.0 + np.exp(-100 * (mse - 0.01))) # –ü—Ä–∏–º–µ—Ä —Å–∏–≥–º–æ–∏–¥—ã

        # –í–µ—Ä–Ω–µ–º—Å—è –∫ –ª–∏–Ω–µ–π–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏, –Ω–æ —Å –±–æ–ª–µ–µ —è–≤–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ "–Ω–æ—Ä–º–∞" –¥–∞–µ—Ç MSE < 0.01, "–ø–∞—Ç–æ–ª–æ–≥–∏—è" > 0.02
        # –≠—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–¥–±–∏—Ä–∞—Ç—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
        BASELINE_MSE = 0.01  # –°—Ä–µ–¥–Ω—è—è MSE –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        THRESHOLD_MSE = 0.03  # MSE, –≤—ã—à–µ –∫–æ—Ç–æ—Ä–æ–π —Å—á–∏—Ç–∞–µ–º –ø–∞—Ç–æ–ª–æ–≥–∏–µ–π
        if mse <= BASELINE_MSE:
            probability = 0.0
        elif mse >= THRESHOLD_MSE:
            probability = 1.0
        else:
            # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É BASELINE –∏ THRESHOLD
            probability = (mse - BASELINE_MSE) / (THRESHOLD_MSE - BASELINE_MSE)

        logger.debug(f"üìä –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (MSE={mse:.6f}, baseline={BASELINE_MSE}, threshold={THRESHOLD_MSE}): {probability:.4f}")
        return float(probability)
