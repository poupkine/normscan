# src/dataloader/dicom_loader.py
import zipfile
import pydicom
import logging
import os
import io
from typing import List

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def load_dicom_from_zip(zip_path: str) -> List[pydicom.Dataset]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç DICOM-—Ñ–∞–π–ª—ã –∏–∑ ZIP-–∞—Ä—Ö–∏–≤–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –§–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .dcm
    - –§–∞–π–ª—ã –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–∏–º–µ–Ω–∞: 1, 2, 3...)
    - –§–∞–π–ª—ã —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π DICM
    """
    datasets = []
    try:
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            all_files = zip_ref.namelist()
            logger.info(f"–í –∞—Ä—Ö–∏–≤–µ {zip_path} –Ω–∞–π–¥–µ–Ω–æ {len(all_files)} —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫.")

            # –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ DICOM-—Ñ–∞–π–ª—ã
            candidate_files = [f for f in all_files if not f.endswith('/')]
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(candidate_files)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö DICOM-—Ñ–∞–π–ª–æ–≤.")

            processed_count = 0
            failed_count = 0

            for file_name in candidate_files:
                full_file_path = f"{zip_path}/{file_name}"  # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    with zip_ref.open(file_name) as f:
                        file_bytes = f.read()

                        if len(file_bytes) == 0:
                            logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª: {full_file_path}")
                            continue

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É DICM
                        has_dicm_signature = file_bytes[:4] == b'DICM'

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                        has_dcm_extension = file_name.lower().endswith('.dcm')

                        # –ü—Ä–æ–±—É–µ–º —á–∏—Ç–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .dcm
                        if has_dicm_signature or has_dcm_extension:
                            try:
                                ds = pydicom.dcmread(io.BytesIO(file_bytes), force=True)
                                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∞—Ç—Ä–∏–±—É—Ç filename
                                # –≠—Ç–æ –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                                ds.filename = file_name
                                datasets.append(ds)
                                processed_count += 1
                                logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω DICOM: {full_file_path}")
                            except Exception as read_error:
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å force=True, –ø—Ä–æ–±—É–µ–º –±–µ–∑
                                try:
                                    ds = pydicom.dcmread(io.BytesIO(file_bytes))
                                    ds.filename = file_name
                                    datasets.append(ds)
                                    processed_count += 1
                                    logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω DICOM (–±–µ–∑ force): {full_file_path}")
                                except Exception:
                                    failed_count += 1
                                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å DICOM (force=True –∏ –±–µ–∑): {full_file_path} | –û—à–∏–±–∫–∞: {str(read_error)[:100]}...")
                        else:
                            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ DICOM
                            # –ò–Ω–æ–≥–¥–∞ DICOM-—Ñ–∞–π–ª—ã –Ω–µ –∏–º–µ—é—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –≤ –Ω–∞—á–∞–ª–µ
                            try:
                                ds = pydicom.dcmread(io.BytesIO(file_bytes), force=True)
                                ds.filename = file_name
                                datasets.append(ds)
                                processed_count += 1
                                logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω DICOM (–±–µ–∑ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã/—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è): {full_file_path}")
                            except Exception as e:
                                logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª (–Ω–µ DICOM): {full_file_path}")

                except Exception as e:
                    failed_count += 1
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {full_file_path}: {type(e).__name__}: {str(e)[:100]}...")

            logger.info(f"‚úÖ –í –∞—Ä—Ö–∏–≤–µ {zip_path} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {processed_count} DICOM-—Å—Ä–µ–∑–æ–≤ (–∏–∑ {len(candidate_files)} —Ñ–∞–π–ª–æ–≤).")
            if failed_count > 0:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {failed_count} —Ñ–∞–π–ª–æ–≤.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ ZIP-–∞—Ä—Ö–∏–≤–∞ {zip_path}: {e}")
        raise

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ InstanceNumber
    def get_instance_number(ds):
        try:
            return int(getattr(ds, 'InstanceNumber', float('inf')))
        except (ValueError, TypeError):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ InstanceNumber –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
            if hasattr(ds, 'filename') and ds.filename:
                basename = os.path.basename(ds.filename)
                name_part = basename.split('.')[0]
                try:
                    return int(name_part)
                except ValueError:
                    pass
            return float('inf')  # –í –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞

    datasets.sort(key=get_instance_number)
    return datasets
