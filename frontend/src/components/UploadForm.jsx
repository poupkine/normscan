// frontend/src/components/UploadForm.jsx
import React, { useState } from 'react';
import { batchPredict, downloadReport } from '../services/api'; // ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º downloadReport
import ResultsTable from './ResultsTable';

const UploadForm = () => {
    const [files, setFiles] = useState([]);
    const [isProcessing, setIsProcessing] = useState(false);
    const [results, setResults] = useState([]);
    const [error, setError] = useState(null);

    const handleFileChange = (e) => {
        setFiles(Array.from(e.target.files));
        setError(null);
    };

    const handleSubmit = async () => {
        if (!files.length) return;
        setIsProcessing(true);
        setError(null);

        try {
            // ‚úÖ –¢–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî –ù–ï —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            const response = await batchPredict(files);
            
            if (!response || !response.results) {
                throw new Error("Invalid response from server");
            }

            setResults(response.results); // ‚úÖ –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            alert('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –Ω–∏–∂–µ.');

        } catch (err) {
            setError(err.message);
            alert(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
        } finally {
            setIsProcessing(false);
        }
    };

    return (
        <div style={{ padding: '20px', maxWidth: '1200px', margin: '0 auto' }}>
            <h1>üìå NORMSCAN ‚Äî –ò–ò-—Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ö–¢ –û–ì–ö —Å ¬´–Ω–æ—Ä–º–æ–π¬ª</h1>
            {error && <div style={{color: 'red', marginBottom: '10px'}}>{error}</div>}
            <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤—ã —Å DICOM-—Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.</p>
            <input type="file" multiple accept=".zip" onChange={handleFileChange} />
            <button 
                onClick={handleSubmit} 
                disabled={isProcessing || !files.length}
                style={{ 
                    marginLeft: '10px', 
                    padding: '10px 20px', 
                    backgroundColor: '#007BFF', 
                    color: 'white', 
                    border: 'none', 
                    borderRadius: '4px', 
                    cursor: 'pointer' 
                }}
            >
                {isProcessing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'}
            </button>
            <ResultsTable results={results} /> {/* ‚úÖ –¢–∞–±–ª–∏—Ü–∞ + –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ */}
        </div>
    );
};

export default UploadForm;
