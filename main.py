# main.py
import os
import time
from pathlib import Path
import numpy as np
import pydicom
import logging
import gc
import torch
from src.dataloader.dicom_loader import load_dicom_from_zip
from src.model.inference import PathologyDetector
from src.utils.dicom_utils import extract_study_series_uids, extract_file_path_from_dataset
from src.reporter.excel_reporter import generate_excel_report

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

MODEL_PATH = "models/autoencoder_2d.pth"
INPUT_DIR = "data/input_zips"
OUTPUT_PATH = "data/output/report.xlsx"


def process_single_dicom_file(ds: pydicom.Dataset, detector: PathologyDetector, zip_path: str) -> dict:
    start_time = time.time()
    try:
        logger.debug(f"--- –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ---")
        # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ DICOM ---
        if not hasattr(ds, 'pixel_array') or ds.pixel_array is None:
            raise ValueError("–ù–µ—Ç –ø–∏–∫—Å–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ DICOM —Ñ–∞–π–ª–µ")

        original_pixel_array = ds.pixel_array
        logger.debug(f"üì∏ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ pixel_array: {original_pixel_array.shape}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ pixel_array 3D (–º–Ω–æ–≥–æ—Å—Ä–µ–∑–æ–≤—ã–π DICOM)
        if original_pixel_array.ndim == 3:
            logger.debug("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω 3D –º–∞—Å—Å–∏–≤, –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —Å—Ä–µ–∑ [0]")
            pixel_array_2d = original_pixel_array[0]
        elif original_pixel_array.ndim == 2:
            pixel_array_2d = original_pixel_array
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å pixel_array: {original_pixel_array.ndim}")

        logger.debug(f"üìè –§–æ—Ä–º–∞ 2D –º–∞—Å—Å–∏–≤–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {pixel_array_2d.shape}")
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"üìä Pixel stats (orig): min={pixel_array_2d.min()}, max={pixel_array_2d.max()}, mean={pixel_array_2d.mean():.2f}")
        pixel_array_float = pixel_array_2d.astype(np.float32)

        # --- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ HU ---
        slope = float(getattr(ds, 'RescaleSlope', 1.0))
        intercept = float(getattr(ds, 'RescaleIntercept', 0.0))
        logger.debug(f"üìê RescaleSlope: {slope}, RescaleIntercept: {intercept}")
        hu_image = pixel_array_float * slope + intercept

        # --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ HU ---
        hu_image_clipped = np.clip(hu_image, -1000, 400)
        logger.debug(f"üìâ HU stats (clipped): min={hu_image_clipped.min()}, max={hu_image_clipped.max()}")

        # --- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ [0, 1] ---
        min_val, max_val = hu_image_clipped.min(), hu_image_clipped.max()
        if max_val == min_val:
            logger.warning("‚ö†Ô∏è –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã. –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω—É–ª–µ–≤–æ–π –º–∞—Å—Å–∏–≤.")
            hu_image_norm = np.zeros_like(hu_image_clipped)
        else:
            hu_image_norm = (hu_image_clipped - min_val) / (max_val - min_val)
        logger.debug(f"üìà –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ stats: min={hu_image_norm.min():.4f}, max={hu_image_norm.max():.4f}, mean={hu_image_norm.mean():.4f}")

        # --- –†–µ—Å–µ–º–ø–ª–∏–Ω–≥ –¥–æ 128x128 ---
        from scipy.ndimage import zoom
        h, w = hu_image_norm.shape
        if h == 0 or w == 0:
            raise ValueError("–†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (0)")
        zoom_factors = (128 / h, 128 / w)
        logger.debug(f"üîé –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ({h}, {w}), Zoom factors: {zoom_factors}")
        slice_resized = zoom(hu_image_norm, zoom_factors, order=1, prefilter=False)
        logger.debug(f"üîé –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥–∞: {slice_resized.shape}")
        logger.debug(f"üîé –†–µ—Å–µ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ stats: min={slice_resized.min():.4f}, max={slice_resized.max():.4f}, mean={slice_resized.mean():.4f}")

        # --- –§–æ—Ä–º–∏—Ä—É–µ–º 4D –º–∞—Å—Å–∏–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ ---
        volume = slice_resized[np.newaxis, np.newaxis, :, :]  # (1, 1, 128, 128)
        logger.debug(f"üì¶ –§–æ—Ä–º–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ volume –¥–ª—è –º–æ–¥–µ–ª–∏: {volume.shape}")

        # --- –ò–Ω—Ñ–µ—Ä–µ–Ω—Å ---
        prob = detector.predict(volume)
        # –û–∫—Ä—É–≥–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        prob_rounded = round(prob, 4)
        logger.debug(f"üßÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞—Ç–æ–ª–æ–≥–∏–∏ (–æ–∫—Ä—É–≥–ª–µ–Ω–∞): {prob_rounded:.4f}")

        # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ---
        uid_info = extract_study_series_uids(ds)
        path_to_study = extract_file_path_from_dataset(ds, zip_path)
        logger.debug(f"üìÅ Path: {path_to_study}")
        logger.debug(f"üÜî Study UID: {uid_info.get('study_uid', '')}")
        logger.debug(f"üî¢ Series UID: {uid_info.get('series_uid', '')}")
        logger.debug(f"--- –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ---")

        processing_time = round(time.time() - start_time, 2)
        return {
            'path_to_study': path_to_study,
            'study_uid': uid_info.get('study_uid', ''),
            'series_uid': uid_info.get('series_uid', ''),
            'probability_of_pathology': prob_rounded,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            'pathology': int(prob_rounded > 0.5),
            'processing_status': 'Success',
            'time_of_processing': processing_time,
            'most_dangerous_pathology_type': None,
            'pathology_localization': None
        }

    except Exception as e:
        processing_time = round(time.time() - start_time, 2)
        error_file_name = getattr(ds, 'filename', 'unknown.dcm') if 'ds' in locals() else 'unknown.dcm'
        error_path = f"{zip_path}/{error_file_name}"
        logger.error(f"üíÄ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ DICOM-—Ñ–∞–π–ª–∞ {error_path}: {str(e)}")
        return {
            'path_to_study': error_path,
            'study_uid': '',
            'series_uid': '',
            'probability_of_pathology': 0.0,
            'pathology': 0,
            'processing_status': 'Failure',
            'time_of_processing': processing_time,
            'most_dangerous_pathology_type': None,
            'pathology_localization': None
        }


def main(input_dir: str, output_path: str, model_path: str):
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
    try:
        logger.info(f"üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∏–∑ {model_path}")
        detector = PathologyDetector(model_path)
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –∏–∑ {model_path}: {e}")
        return

    results = []
    input_path = Path(input_dir)
    if not input_path.exists():
        logger.error(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {input_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return

    zip_files = list(input_path.glob("*.zip"))
    logger.info(f"üìÇ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(zip_files)} ZIP-—Ñ–∞–π–ª–æ–≤.")

    for zip_file in zip_files:
        try:
            logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ ZIP-—Ñ–∞–π–ª–∞: {zip_file.name}")
            dicom_list = load_dicom_from_zip(str(zip_file))
            logger.info(f"üìÑ –í ZIP-—Ñ–∞–π–ª–µ {zip_file.name} –Ω–∞–π–¥–µ–Ω–æ {len(dicom_list)} DICOM-—Ñ–∞–π–ª–æ–≤.")

            for i, ds in enumerate(dicom_list):
                # –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
                # if i >= 10: break
                logger.info(f"  üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {i + 1}/{len(dicom_list)}")
                result = process_single_dicom_file(ds, detector, str(zip_file))
                results.append(result)

        except Exception as e:
            logger.error(f"üß® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ZIP-—Ñ–∞–π–ª–∞ {zip_file}: {e}")

    logger.info(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")
    try:
        logger.info(f"üíæ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤ {output_path}")
        generate_excel_report(results, output_path)
        logger.info("üèÅ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    except Exception as e:
        logger.error(f"üí£ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")


if __name__ == "__main__":
    # –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å DEBUG
    # logging.getLogger().setLevel(logging.DEBUG)
    main(INPUT_DIR, OUTPUT_PATH, MODEL_PATH)
